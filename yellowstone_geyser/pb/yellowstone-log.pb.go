// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: yellowstone-log.proto

package yellowstone_geyser_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartitionAssignmentStrategy int32

const (
	PartitionAssignmentStrategy_STATIC PartitionAssignmentStrategy = 0
)

// Enum value maps for PartitionAssignmentStrategy.
var (
	PartitionAssignmentStrategy_name = map[int32]string{
		0: "STATIC",
	}
	PartitionAssignmentStrategy_value = map[string]int32{
		"STATIC": 0,
	}
)

func (x PartitionAssignmentStrategy) Enum() *PartitionAssignmentStrategy {
	p := new(PartitionAssignmentStrategy)
	*p = x
	return p
}

func (x PartitionAssignmentStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionAssignmentStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_yellowstone_log_proto_enumTypes[0].Descriptor()
}

func (PartitionAssignmentStrategy) Type() protoreflect.EnumType {
	return &file_yellowstone_log_proto_enumTypes[0]
}

func (x PartitionAssignmentStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartitionAssignmentStrategy.Descriptor instead.
func (PartitionAssignmentStrategy) EnumDescriptor() ([]byte, []int) {
	return file_yellowstone_log_proto_rawDescGZIP(), []int{0}
}

// / The InitialOffsetPolicy enum determines the initial offset used when subscribing to events or messages. It provides three options:
// /
// / EARLIEST (0)
// / This policy subscribes to events or messages starting from the earliest available offset in the data stream. It ensures that all historical data is consumed from the beginning.
// /
// / LATEST (1)
// / Subscribes to events or messages starting from the latest available offset in the data stream. It only consumes new events or messages generated after the subscription is initiated.
// /
// / SLOT (2)
// / This policy subscribes to events or messages starting from a specific slot number in the data stream. It allows for precise control over where consumption begins based on slot numbers.
type InitialOffsetPolicy int32

const (
	InitialOffsetPolicy_EARLIEST InitialOffsetPolicy = 0
	InitialOffsetPolicy_LATEST   InitialOffsetPolicy = 1
	InitialOffsetPolicy_SLOT     InitialOffsetPolicy = 2
)

// Enum value maps for InitialOffsetPolicy.
var (
	InitialOffsetPolicy_name = map[int32]string{
		0: "EARLIEST",
		1: "LATEST",
		2: "SLOT",
	}
	InitialOffsetPolicy_value = map[string]int32{
		"EARLIEST": 0,
		"LATEST":   1,
		"SLOT":     2,
	}
)

func (x InitialOffsetPolicy) Enum() *InitialOffsetPolicy {
	p := new(InitialOffsetPolicy)
	*p = x
	return p
}

func (x InitialOffsetPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitialOffsetPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_yellowstone_log_proto_enumTypes[1].Descriptor()
}

func (InitialOffsetPolicy) Type() protoreflect.EnumType {
	return &file_yellowstone_log_proto_enumTypes[1]
}

func (x InitialOffsetPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InitialOffsetPolicy.Descriptor instead.
func (InitialOffsetPolicy) EnumDescriptor() ([]byte, []int) {
	return file_yellowstone_log_proto_rawDescGZIP(), []int{1}
}

// / The EventSubscriptionPolicy enum defines the types of events to subscribe to. It offers three options:
// /
// / ACCOUNT_UPDATE_ONLY (0)
// / Subscribes to account update events exclusively. It filters out other types of events, focusing solely on account-related updates.
// /
// / TRANSACTION_ONLY (1)
// / Subscribes to transaction events exclusively. It filters out non-transactional events, ensuring that only transaction-related data is consumed.
// /
// / BOTH (2)
// / This policy subscribes to both account update and transaction events. It enables consumption of a wider range of event types, encompassing both account-related updates and transactions.
type EventSubscriptionPolicy int32

const (
	EventSubscriptionPolicy_ACCOUNT_UPDATE_ONLY EventSubscriptionPolicy = 0
	EventSubscriptionPolicy_TRANSACTION_ONLY    EventSubscriptionPolicy = 1
	EventSubscriptionPolicy_BOTH                EventSubscriptionPolicy = 2
)

// Enum value maps for EventSubscriptionPolicy.
var (
	EventSubscriptionPolicy_name = map[int32]string{
		0: "ACCOUNT_UPDATE_ONLY",
		1: "TRANSACTION_ONLY",
		2: "BOTH",
	}
	EventSubscriptionPolicy_value = map[string]int32{
		"ACCOUNT_UPDATE_ONLY": 0,
		"TRANSACTION_ONLY":    1,
		"BOTH":                2,
	}
)

func (x EventSubscriptionPolicy) Enum() *EventSubscriptionPolicy {
	p := new(EventSubscriptionPolicy)
	*p = x
	return p
}

func (x EventSubscriptionPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSubscriptionPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_yellowstone_log_proto_enumTypes[2].Descriptor()
}

func (EventSubscriptionPolicy) Type() protoreflect.EnumType {
	return &file_yellowstone_log_proto_enumTypes[2]
}

func (x EventSubscriptionPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSubscriptionPolicy.Descriptor instead.
func (EventSubscriptionPolicy) EnumDescriptor() ([]byte, []int) {
	return file_yellowstone_log_proto_rawDescGZIP(), []int{2}
}

// / Timeline Translation Policy
// / The TimelineTranslationPolicy enum defines different strategies for translating users to timelines based on their last seen slot number or a specified lag. This is particularly useful for managing data consumption in conjunction with the ConsumeRequest.ttp_maximum_slot_lag parameter.
// /
// / ALLOW_LAG
// / This policy allows users to be translated to a timeline that contains the last seen slot number or up to a certain lag. It extends the allowable lag for eligible timelines.
// /
// / Example:
// /
// / Suppose we have three timelines with the latest available slot numbers:
// /
// / timeline1 : 10
// / timeline2 : 5
// / timeline3 : 8
// / If a consumer is assigned to timeline1 with ttp_maximum_slot_lag set to 2, then the only eligible destination timeline would be timeline3.
// /
// / STRICT_SLOT
// / Under this policy, eligible destination timelines must contain the last seen slot number in the current consumer timeline; otherwise, the translation fails. This ensures strict adherence to slot numbers when translating users to timelines.
type TimelineTranslationPolicy int32

const (
	TimelineTranslationPolicy_ALLOW_LAG   TimelineTranslationPolicy = 0
	TimelineTranslationPolicy_STRICT_SLOT TimelineTranslationPolicy = 1
)

// Enum value maps for TimelineTranslationPolicy.
var (
	TimelineTranslationPolicy_name = map[int32]string{
		0: "ALLOW_LAG",
		1: "STRICT_SLOT",
	}
	TimelineTranslationPolicy_value = map[string]int32{
		"ALLOW_LAG":   0,
		"STRICT_SLOT": 1,
	}
)

func (x TimelineTranslationPolicy) Enum() *TimelineTranslationPolicy {
	p := new(TimelineTranslationPolicy)
	*p = x
	return p
}

func (x TimelineTranslationPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimelineTranslationPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_yellowstone_log_proto_enumTypes[3].Descriptor()
}

func (TimelineTranslationPolicy) Type() protoreflect.EnumType {
	return &file_yellowstone_log_proto_enumTypes[3]
}

func (x TimelineTranslationPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimelineTranslationPolicy.Descriptor instead.
func (TimelineTranslationPolicy) EnumDescriptor() ([]byte, []int) {
	return file_yellowstone_log_proto_rawDescGZIP(), []int{3}
}

type CreateStaticConsumerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CreateStaticConsumerGroupResponse) Reset() {
	*x = CreateStaticConsumerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yellowstone_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStaticConsumerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStaticConsumerGroupResponse) ProtoMessage() {}

func (x *CreateStaticConsumerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yellowstone_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStaticConsumerGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateStaticConsumerGroupResponse) Descriptor() ([]byte, []int) {
	return file_yellowstone_log_proto_rawDescGZIP(), []int{0}
}

func (x *CreateStaticConsumerGroupResponse) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type CreateStaticConsumerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceIdList           []string `protobuf:"bytes,2,rep,name=instance_id_list,json=instanceIdList,proto3" json:"instance_id_list,omitempty"`
	RedundancyInstanceIdList []string `protobuf:"bytes,3,rep,name=redundancy_instance_id_list,json=redundancyInstanceIdList,proto3" json:"redundancy_instance_id_list,omitempty"`
}

func (x *CreateStaticConsumerGroupRequest) Reset() {
	*x = CreateStaticConsumerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yellowstone_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStaticConsumerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStaticConsumerGroupRequest) ProtoMessage() {}

func (x *CreateStaticConsumerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yellowstone_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStaticConsumerGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateStaticConsumerGroupRequest) Descriptor() ([]byte, []int) {
	return file_yellowstone_log_proto_rawDescGZIP(), []int{1}
}

func (x *CreateStaticConsumerGroupRequest) GetInstanceIdList() []string {
	if x != nil {
		return x.InstanceIdList
	}
	return nil
}

func (x *CreateStaticConsumerGroupRequest) GetRedundancyInstanceIdList() []string {
	if x != nil {
		return x.RedundancyInstanceIdList
	}
	return nil
}

// / The ConsumeRequest message defines parameters for consuming events or messages from a data stream. It includes the following fields:
// /
// / consumer_id (1)
// / An optional string representing the consumer's unique identifier.
// /
// / initial_offset_policy (2)
// / Specifies the initial offset policy for subscribing to events. It uses values from the InitialOffsetPolicy enum.
// /
// / at_slot (3)
// / An optional int64 indicating the specific slot number from which consumption should start. This is relevant when initial_offset_policy is set to SLOT.
// /
// / event_subscription_policy (4)
// / Defines the event subscription policy using values from the EventSubscriptionPolicy enum.
// /
// / account_update_event_filter (5)
// / An optional AccountUpdateEventFilter message specifying filters for account update events.
// /
// / tx_event_filter (6)
// / An optional TransactionEventFilter message defining filters for transaction events.
// /
// / commitment_level (7)
// / Specifies the commitment level for consuming events. It uses values from the geyser.CommitmentLevel enum.
// /
// / timelineTranslationPolicy (8)
// / An optional TimelineTranslationPolicy describing the policy for triggering timeline translation when an ingester is out of service and consumers need to be translated to a different ingestion timeline.
// /
// / ttp_maximum_slot_lag (9)
// / An optional uint32 indicating the maximum slot lag allowed for timeline translation.
type ConsumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerGroupId          *string                   `protobuf:"bytes,1,opt,name=consumer_group_id,json=consumerGroupId,proto3,oneof" json:"consumer_group_id,omitempty"`
	ConsumerId               *string                   `protobuf:"bytes,2,opt,name=consumer_id,json=consumerId,proto3,oneof" json:"consumer_id,omitempty"`
	InstanceId               *string                   `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3,oneof" json:"instance_id,omitempty"`
	InitialOffsetPolicy      InitialOffsetPolicy       `protobuf:"varint,4,opt,name=initial_offset_policy,json=initialOffsetPolicy,proto3,enum=yellowstone.log.InitialOffsetPolicy" json:"initial_offset_policy,omitempty"`
	CommitmentLevel          CommitmentLevel           `protobuf:"varint,5,opt,name=commitment_level,json=commitmentLevel,proto3,enum=geyser.CommitmentLevel" json:"commitment_level,omitempty"`
	EventSubscriptionPolicy  EventSubscriptionPolicy   `protobuf:"varint,6,opt,name=event_subscription_policy,json=eventSubscriptionPolicy,proto3,enum=yellowstone.log.EventSubscriptionPolicy" json:"event_subscription_policy,omitempty"`
	AtSlot                   *int64                    `protobuf:"varint,7,opt,name=at_slot,json=atSlot,proto3,oneof" json:"at_slot,omitempty"`
	AccountUpdateEventFilter *AccountUpdateEventFilter `protobuf:"bytes,8,opt,name=account_update_event_filter,json=accountUpdateEventFilter,proto3,oneof" json:"account_update_event_filter,omitempty"`
	TxEventFilter            *TransactionEventFilter   `protobuf:"bytes,9,opt,name=tx_event_filter,json=txEventFilter,proto3,oneof" json:"tx_event_filter,omitempty"`
	// timelineTranslationPolicy is used when an ingester is out of service and we need to translate a set
	// of consumer to a different ingestion timeline. The policy describe what to do when we need to trigger timeline translation.
	TimelineTranslationPolicy *TimelineTranslationPolicy `protobuf:"varint,10,opt,name=timelineTranslationPolicy,proto3,enum=yellowstone.log.TimelineTranslationPolicy,oneof" json:"timelineTranslationPolicy,omitempty"`
	TtpMaximumSlotLag         *uint32                    `protobuf:"varint,11,opt,name=ttp_maximum_slot_lag,json=ttpMaximumSlotLag,proto3,oneof" json:"ttp_maximum_slot_lag,omitempty"`
}

func (x *ConsumeRequest) Reset() {
	*x = ConsumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yellowstone_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeRequest) ProtoMessage() {}

func (x *ConsumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yellowstone_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeRequest.ProtoReflect.Descriptor instead.
func (*ConsumeRequest) Descriptor() ([]byte, []int) {
	return file_yellowstone_log_proto_rawDescGZIP(), []int{2}
}

func (x *ConsumeRequest) GetConsumerGroupId() string {
	if x != nil && x.ConsumerGroupId != nil {
		return *x.ConsumerGroupId
	}
	return ""
}

func (x *ConsumeRequest) GetConsumerId() string {
	if x != nil && x.ConsumerId != nil {
		return *x.ConsumerId
	}
	return ""
}

func (x *ConsumeRequest) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *ConsumeRequest) GetInitialOffsetPolicy() InitialOffsetPolicy {
	if x != nil {
		return x.InitialOffsetPolicy
	}
	return InitialOffsetPolicy_EARLIEST
}

func (x *ConsumeRequest) GetCommitmentLevel() CommitmentLevel {
	if x != nil {
		return x.CommitmentLevel
	}
	return CommitmentLevel_PROCESSED
}

func (x *ConsumeRequest) GetEventSubscriptionPolicy() EventSubscriptionPolicy {
	if x != nil {
		return x.EventSubscriptionPolicy
	}
	return EventSubscriptionPolicy_ACCOUNT_UPDATE_ONLY
}

func (x *ConsumeRequest) GetAtSlot() int64 {
	if x != nil && x.AtSlot != nil {
		return *x.AtSlot
	}
	return 0
}

func (x *ConsumeRequest) GetAccountUpdateEventFilter() *AccountUpdateEventFilter {
	if x != nil {
		return x.AccountUpdateEventFilter
	}
	return nil
}

func (x *ConsumeRequest) GetTxEventFilter() *TransactionEventFilter {
	if x != nil {
		return x.TxEventFilter
	}
	return nil
}

func (x *ConsumeRequest) GetTimelineTranslationPolicy() TimelineTranslationPolicy {
	if x != nil && x.TimelineTranslationPolicy != nil {
		return *x.TimelineTranslationPolicy
	}
	return TimelineTranslationPolicy_ALLOW_LAG
}

func (x *ConsumeRequest) GetTtpMaximumSlotLag() uint32 {
	if x != nil && x.TtpMaximumSlotLag != nil {
		return *x.TtpMaximumSlotLag
	}
	return 0
}

// / The AccountUpdateEventFilter message defines filters for account update events. It includes the following fields:
// /
// / pubkeys (1)
// / A repeated field of bytes representing public keys. Events matching any of these public keys will be included in the filtered results.
// /
// / owners (2)
// / A repeated field of bytes representing account owners. Events matching any of these account owners will be included in the filtered results.
type AccountUpdateEventFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkeys [][]byte `protobuf:"bytes,1,rep,name=pubkeys,proto3" json:"pubkeys,omitempty"`
	Owners  [][]byte `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners,omitempty"`
}

func (x *AccountUpdateEventFilter) Reset() {
	*x = AccountUpdateEventFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yellowstone_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountUpdateEventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountUpdateEventFilter) ProtoMessage() {}

func (x *AccountUpdateEventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yellowstone_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountUpdateEventFilter.ProtoReflect.Descriptor instead.
func (*AccountUpdateEventFilter) Descriptor() ([]byte, []int) {
	return file_yellowstone_log_proto_rawDescGZIP(), []int{3}
}

func (x *AccountUpdateEventFilter) GetPubkeys() [][]byte {
	if x != nil {
		return x.Pubkeys
	}
	return nil
}

func (x *AccountUpdateEventFilter) GetOwners() [][]byte {
	if x != nil {
		return x.Owners
	}
	return nil
}

// / account_keys (1)
// / A repeated field of bytes representing account keys. Events associated with any of these account keys will be included in the filtered results.
type TransactionEventFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountKeys [][]byte `protobuf:"bytes,1,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
}

func (x *TransactionEventFilter) Reset() {
	*x = TransactionEventFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yellowstone_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEventFilter) ProtoMessage() {}

func (x *TransactionEventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yellowstone_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEventFilter.ProtoReflect.Descriptor instead.
func (*TransactionEventFilter) Descriptor() ([]byte, []int) {
	return file_yellowstone_log_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionEventFilter) GetAccountKeys() [][]byte {
	if x != nil {
		return x.AccountKeys
	}
	return nil
}

var File_yellowstone_log_proto protoreflect.FileDescriptor

var file_yellowstone_log_proto_rawDesc = []byte{
	0x0a, 0x15, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2d, 0x6c, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x6c, 0x6f, 0x67, 0x1a, 0x0c, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x72, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xc6, 0x07, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x42,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x64, 0x0a, 0x19, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x61, 0x74, 0x53,
	0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6d, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x05, 0x52, 0x0d, 0x74, 0x78, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x6d, 0x0a, 0x19, 0x74,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x06, 0x52, 0x19, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x74, 0x74,
	0x70, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6c,
	0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x11, 0x74, 0x74, 0x70, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x61, 0x67, 0x88, 0x01, 0x01,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6c, 0x61, 0x67, 0x22, 0x4c, 0x0a,
	0x18, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x3b, 0x0a, 0x16, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x2a, 0x29, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x43, 0x10, 0x00, 0x2a, 0x39, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41,
	0x52, 0x4c, 0x49, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x41, 0x54, 0x45,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x02, 0x2a, 0x52,
	0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48,
	0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x19, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x41, 0x47, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x01, 0x32,
	0xe0, 0x01, 0x0a, 0x0e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x4c,
	0x6f, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x31, 0x2e, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x6c,
	0x6f, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62,
	0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yellowstone_log_proto_rawDescOnce sync.Once
	file_yellowstone_log_proto_rawDescData = file_yellowstone_log_proto_rawDesc
)

func file_yellowstone_log_proto_rawDescGZIP() []byte {
	file_yellowstone_log_proto_rawDescOnce.Do(func() {
		file_yellowstone_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_yellowstone_log_proto_rawDescData)
	})
	return file_yellowstone_log_proto_rawDescData
}

var file_yellowstone_log_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_yellowstone_log_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_yellowstone_log_proto_goTypes = []interface{}{
	(PartitionAssignmentStrategy)(0),          // 0: yellowstone.log.PartitionAssignmentStrategy
	(InitialOffsetPolicy)(0),                  // 1: yellowstone.log.InitialOffsetPolicy
	(EventSubscriptionPolicy)(0),              // 2: yellowstone.log.EventSubscriptionPolicy
	(TimelineTranslationPolicy)(0),            // 3: yellowstone.log.TimelineTranslationPolicy
	(*CreateStaticConsumerGroupResponse)(nil), // 4: yellowstone.log.CreateStaticConsumerGroupResponse
	(*CreateStaticConsumerGroupRequest)(nil),  // 5: yellowstone.log.CreateStaticConsumerGroupRequest
	(*ConsumeRequest)(nil),                    // 6: yellowstone.log.ConsumeRequest
	(*AccountUpdateEventFilter)(nil),          // 7: yellowstone.log.AccountUpdateEventFilter
	(*TransactionEventFilter)(nil),            // 8: yellowstone.log.TransactionEventFilter
	(CommitmentLevel)(0),                      // 9: geyser.CommitmentLevel
	(*SubscribeUpdate)(nil),                   // 10: geyser.SubscribeUpdate
}
var file_yellowstone_log_proto_depIdxs = []int32{
	1,  // 0: yellowstone.log.ConsumeRequest.initial_offset_policy:type_name -> yellowstone.log.InitialOffsetPolicy
	9,  // 1: yellowstone.log.ConsumeRequest.commitment_level:type_name -> geyser.CommitmentLevel
	2,  // 2: yellowstone.log.ConsumeRequest.event_subscription_policy:type_name -> yellowstone.log.EventSubscriptionPolicy
	7,  // 3: yellowstone.log.ConsumeRequest.account_update_event_filter:type_name -> yellowstone.log.AccountUpdateEventFilter
	8,  // 4: yellowstone.log.ConsumeRequest.tx_event_filter:type_name -> yellowstone.log.TransactionEventFilter
	3,  // 5: yellowstone.log.ConsumeRequest.timelineTranslationPolicy:type_name -> yellowstone.log.TimelineTranslationPolicy
	5,  // 6: yellowstone.log.YellowstoneLog.CreateStaticConsumerGroup:input_type -> yellowstone.log.CreateStaticConsumerGroupRequest
	6,  // 7: yellowstone.log.YellowstoneLog.Consume:input_type -> yellowstone.log.ConsumeRequest
	4,  // 8: yellowstone.log.YellowstoneLog.CreateStaticConsumerGroup:output_type -> yellowstone.log.CreateStaticConsumerGroupResponse
	10, // 9: yellowstone.log.YellowstoneLog.Consume:output_type -> geyser.SubscribeUpdate
	8,  // [8:10] is the sub-list for method output_type
	6,  // [6:8] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_yellowstone_log_proto_init() }
func file_yellowstone_log_proto_init() {
	if File_yellowstone_log_proto != nil {
		return
	}
	file_geyser_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yellowstone_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStaticConsumerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yellowstone_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStaticConsumerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yellowstone_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yellowstone_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountUpdateEventFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yellowstone_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEventFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yellowstone_log_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yellowstone_log_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yellowstone_log_proto_goTypes,
		DependencyIndexes: file_yellowstone_log_proto_depIdxs,
		EnumInfos:         file_yellowstone_log_proto_enumTypes,
		MessageInfos:      file_yellowstone_log_proto_msgTypes,
	}.Build()
	File_yellowstone_log_proto = out.File
	file_yellowstone_log_proto_rawDesc = nil
	file_yellowstone_log_proto_goTypes = nil
	file_yellowstone_log_proto_depIdxs = nil
}
